# -*- coding: utf-8 -*-
"""Wallet Scoring Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1idxvnXB4toeTBgRE_LbCTWPC5i8hLX9q
"""

import pandas as pd
import numpy as np
data=pd.read_json("/content/user-wallet-transactions.json")
df=pd.DataFrame(data)
df

action_data=pd.json_normalize(df['actionData'])

df=df.drop(columns=['action'])

df=pd.concat([df,action_data],axis=1)

#convert types
df['timestamp']=pd.to_datetime(df['timestamp'],unit='s')
df['amount']=pd.to_numeric(df['amount'],errors='coerce')
df['assetPriceUSD']=pd.to_numeric(df['assetPriceUSD'],errors='coerce')
df['amount_usd']=(df['amount']/ 1e6)*df['assetPriceUSD']

df

#Feature Engineering
action_counts = df.pivot_table(index='userWallet', columns='type', values='amount_usd', aggfunc='count', fill_value=0).add_prefix('num_')
action_usd_sums=df.pivot_table(index='userWallet', columns='type', values='amount_usd', aggfunc='sum', fill_value=0).add_prefix('sum_')

df_sorted=df.sort_values(['userWallet','timestamp'])
df_sorted

df_sorted['time_diff']=df_sorted.groupby('userWallet')['timestamp'].diff().dt.total_seconds()
avg_time_diff=df_sorted.groupby('userWallet')['time_diff'].mean().fillna(0).rename('avg_time_diff_secs')

unique_assets=df.groupby('userWallet')['assetSymbol'].nunique().rename('unique_assets_used')

wallet_features=pd.concat([action_counts,action_usd_sums,avg_time_diff,unique_assets],axis=1).fillna(0)
wallet_features['repay_to_borrow_ratio']=wallet_features['num_Repay']/wallet_features['num_Borrow'].replace(0,1)
wallet_features['liquidation_rate']=wallet_features['num_LiquidationCall']/(wallet_features['num_Borrow']+wallet_features['num_Repay']).replace(0,1)
wallet_features.head()

#Scoring Function
def score_wallet(row):
    score = 500

    if row['repay_to_borrow_ratio'] > 0.8:
        score += 150
    if row.get('num_deposit', 0) > 5 and row.get('usd_deposit', 0) > 1000:
        score += 100
    if row['unique_assets_used'] > 3:
        score += 100

    if row['liquidation_rate'] > 0.5:
        score -= 200
    if row['avg_time_diff_secs'] < 300:
        score -= 100

    return max(0, min(1000, score))

wallet_features['credit_score'] = wallet_features.apply(score_wallet, axis=1)
wallet_features[['credit_score']].head()

from google.colab import files

wallet_features[['credit_score']].to_csv('wallet_scores.csv')
files.download('wallet_scores.csv')

import matplotlib.pyplot as plt

score_bins = pd.cut(wallet_features['credit_score'], bins=range(200, 900, 100))
bin_counts = score_bins.value_counts().sort_index()
bin_counts.plot(kind='bar', figsize=(10, 5), title='Credit Score Distribution',color='Green')
plt.xlabel('Score Range')
plt.ylabel('Number of Wallets')
plt.grid(True)
plt.tight_layout()
plt.show()

